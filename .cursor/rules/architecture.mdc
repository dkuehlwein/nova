---
description: 
globs: 
alwaysApply: true
---
# Nova Codebase Architecture Rules

## Overview
Nova is a kanban task management system with AI agent integration. The codebase follows a clean separation of concerns to prevent duplication and maintain clear boundaries.

## Directory Structure & Responsibilities

### Backend Architecture (`/backend/`)
```
backend/
├── agent/                  # AI Agent Core
│   ├── chat_agent.py      # LangGraph chat agent (streaming, tools)
│   ├── core_agent.py      # Autonomous task processor
│   ├── llm.py             # LLM configuration
│   ├── prompts.py         # Prompt loading utilities
│   └── prompts/           # Prompt files (.md)
├── api/                   # FastAPI Endpoints
│   ├── api_endpoints.py   # Main CRUD operations (tasks, persons, projects)
│   ├── chat_endpoints.py  # Chat/agent interaction endpoints
│   ├── websocket_endpoints.py # WebSocket connections
│   ├── mcp_endpoints.py   # MCP server management
│   ├── admin_endpoints.py # Admin/debug endpoints
│   └── config_endpoints.py # Configuration management
├── database/              # Database Layer
│   ├── database.py        # Connection management
│   └── models.py          # SQLAlchemy models
├── models/                # Pydantic Models
│   ├── models.py          # Request/response models
│   └── events.py          # Event models for Redis
├── tools/                 # LangChain Tools
│   ├── __init__.py        # Tool registry
│   ├── task_tools.py      # Task CRUD operations
│   ├── person_tools.py    # Person management
│   ├── project_tools.py   # Project management
│   └── human_escalation_tool.py # Escalation handling
├── utils/                 # Shared Utilities
│   ├── service_manager.py # Common service lifecycle
│   ├── logging.py         # Structured logging
│   ├── redis_manager.py   # Redis pub/sub
│   ├── websocket_manager.py # WebSocket management
│   ├── prompt_loader.py   # Hot-reload prompts
│   └── config_loader.py   # Configuration management
├── start_website.py       # Chat agent service (port 8000)
├── start_core_agent.py    # Core agent service (port 8001)
└── mcp_client.py          # MCP client integration
```

### Frontend Architecture (`/frontend/`)
```
frontend/src/
├── app/                   # Next.js App Router
├── components/            # React components
├── lib/                   # Client utilities
└── types/                 # TypeScript types
```

### Testing Architecture (`/tests/`)
```
tests/
├── backend/               # Backend unit tests
├── api/                   # API integration tests
├── agent/                 # Agent-specific tests
├── integration/           # End-to-end tests
└── conftest.py            # Pytest configuration
```

## Anti-Duplication Rules

### 🚫 NEVER Duplicate These Patterns

#### Service Lifecycle Management
- **USE**: `utils/service_manager.py` ServiceManager class
- **NOT**: Custom startup/shutdown logic in start scripts
- **PATTERN**: All services use ServiceManager for logging, Redis, prompt watching, cleanup

#### Database Operations
- **USE**: `database/database.py` db_manager
- **NOT**: Direct SQLAlchemy session creation
- **PATTERN**: `async with db_manager.get_session() as session:`

#### Agent Creation
- **USE**: `agent/chat_agent.py` create_chat_agent() function
- **NOT**: Direct LangGraph agent creation
- **PATTERN**: `await create_chat_agent(reload_tools=True)` for reloading

#### Logging
- **USE**: `utils/logging.py` structured logging
- **NOT**: Python's basic logging module
- **PATTERN**: JSON structured logs with service name, request ID

#### Redis Events
- **USE**: `utils/redis_manager.py` publish/subscribe
- **NOT**: Direct Redis client usage
- **PATTERN**: Event models from `models/events.py`

#### WebSocket Management
- **USE**: `utils/websocket_manager.py` WebSocketManager
- **NOT**: Direct FastAPI WebSocket handling
- **PATTERN**: Centralized connection management with Redis integration

#### Configuration
- **USE**: `config.py` settings object
- **NOT**: Direct environment variable access
- **PATTERN**: Pydantic settings with validation

### 🎯 Single Responsibility Assignments

#### Services
- **Chat Agent Service** (`start_website.py`): User-facing chat, API endpoints
- **Core Agent Service** (`start_core_agent.py`): Autonomous task processing

#### Agents
- **Chat Agent** (`chat_agent.py`): Interactive conversations, tool usage
- **Core Agent** (`core_agent.py`): Autonomous task monitoring and processing

#### API Endpoints
- **api_endpoints.py**: Task/Person/Project CRUD operations
- **chat_endpoints.py**: Chat conversations, agent interaction
- **websocket_endpoints.py**: Real-time connections only
- **mcp_endpoints.py**: MCP server configuration only
- **admin_endpoints.py**: Admin/debug operations only

#### Tools
- **task_tools.py**: Task CRUD operations for agents
- **person_tools.py**: Person management for agents
- **project_tools.py**: Project management for agents
- **human_escalation_tool.py**: Escalation handling only

### 🔄 Integration Patterns

#### Service Events
```python
# ✅ CORRECT: Use ServiceManager
service_manager = ServiceManager("service-name")
await service_manager.start_redis_bridge(app, event_handler)

# ❌ WRONG: Custom Redis bridge implementation
```

#### Error Handling
```python
# ✅ CORRECT: Structured logging with context
logger.error("Operation failed", extra={"data": {"task_id": task_id, "error": str(e)}})

# ❌ WRONG: Basic logging without context
logger.error(f"Operation failed: {e}")
```

### 📁 File Placement Rules

#### New Backend Features
- **Models**: Add to `models/models.py` (Pydantic) or `database/models.py` (SQLAlchemy)
- **API Endpoints**: Add to appropriate `api/*_endpoints.py` file
- **Agent Tools**: Add to `tools/` with clear naming convention
- **Utilities**: Add to `utils/` if shared across services
- **Tests**: Add to `tests/backend/` with descriptive names

#### Configuration
- **Environment Variables**: Document in `config.py`
- **MCP Servers**: Configure in `configs/` directory
- **Prompts**: Store in `backend/agent/prompts/` as `.md` files

### 🧪 Testing Patterns

#### Test Organization
- **Unit Tests**: `tests/backend/test_*.py`
- **Integration Tests**: `tests/integration/test_*.py`
- **API Tests**: `tests/api/test_*.py`
- **Agent Tests**: `tests/agent/test_*.py`

#### Test Naming
- **Pattern**: `test_<functionality>_<expected_behavior>`
- **Example**: `test_agent_reloading_clears_cache_and_recreates`

## Implementation Guidelines

### Before Adding New Code
1. **Check**: Does this functionality exist elsewhere?
2. **Locate**: Which service/module should own this?
3. **Integrate**: Can existing utilities handle this?
4. **Test**: Add tests following existing patterns

### When Refactoring
1. **Consolidate**: Look for duplicate patterns
2. **Extract**: Move common code to utilities
3. **Simplify**: Reduce complexity using existing infrastructure
4. **Document**: Update this architecture guide if patterns change

### MVP Principles
- **No deprecated code**: Remove immediately, don't mark as deprecated
- **No complex abstractions**: Keep it simple for single admin user
- **Fast iteration**: Prefer working code over perfect architecture
- **Clear boundaries**: Each service has distinct responsibility

This architecture ensures clean separation of concerns, prevents code duplication, and maintains clear service boundaries for Nova's AI-powered kanban system.
