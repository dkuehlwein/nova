services:
  # PostgreSQL Database for Kanban MCP
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nova_kanban}
      POSTGRES_USER: ${POSTGRES_USER:-nova}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nova_dev_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nova} -d ${POSTGRES_DB:-nova_kanban}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Neo4j Database for Memory/Knowledge Graph
  neo4j:
    image: neo4j:5.26
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "${NEO4J_PORT:-7687}:7687"      # Bolt protocol
      - "${NEO4J_HTTP_PORT:-7474}:7474" # Web interface
    volumes:
      - neo4j_data:/data
    # Disable healthcheck temporarily to avoid startup issues
    # healthcheck:
    #   test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 40s
    restart: unless-stopped

  # Redis for pub/sub events, caching, and service coordination
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Ollama for local LLM inference with GPU support
  ollama:
    image: ollama/ollama:latest
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_HOST=0.0.0.0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # LiteLLM Gateway for unified LLM API
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    env_file:
      - .env
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-nova}:${POSTGRES_PASSWORD:-nova_dev_password}@postgres:5432/${POSTGRES_DB:-nova_kanban}
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-1234}
      LITELLM_SALT_KEY: ${LITELLM_SALT_KEY:-sk-salt-1234}
      OLLAMA_BASE_URL: http://ollama:11434
      STORE_MODEL_IN_DB: "True"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Nova Backend (Core data services: API + Agent)
  nova-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nova}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nova_dev_password}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-nova_kanban}
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8000}
      SQL_DEBUG: ${SQL_DEBUG:-false}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      CREATE_TABLES: ${CREATE_TABLES:-true}
      # LLM Provider Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-google}
      OLLAMA_BASE_URL: http://ollama:11434
      LITELLM_BASE_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-1234}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount docker socket for service restart functionality (dev-only)
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount configs directory for hot-reload
      - ./configs:/app/configs
      # Mount prompts directory for hot-reload
      - ./backend/agent/prompts:/app/backend/agent/prompts
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nova Core Agent (Autonomous task processing)
  nova-core-agent:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    command: uv run python start_core_agent.py
    ports:
      - "${CORE_AGENT_PORT:-8001}:${CORE_AGENT_PORT:-8001}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nova}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nova_dev_password}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-nova_kanban}
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${CORE_AGENT_PORT:-8001}
      SQL_DEBUG: ${SQL_DEBUG:-false}
      # LLM Provider Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-google}
      OLLAMA_BASE_URL: http://ollama:11434
      LITELLM_BASE_URL: http://litellm:4000
      LITELLM_MASTER_KEY: ${LITELLM_MASTER_KEY:-sk-1234}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      litellm:
        condition: service_healthy
      nova-backend:
        condition: service_healthy
    volumes:
      # Mount configs directory for hot-reload
      - ./configs:/app/configs
      # Mount prompts directory for hot-reload
      - ./backend/agent/prompts:/app/backend/agent/prompts
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CORE_AGENT_PORT:-8001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nova Frontend (Next.js)
  nova-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: production
    depends_on:
      nova-backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for email processing
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    command: uv run celery -A celery_app worker --loglevel=info --queues=email
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nova}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nova_dev_password}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-nova_kanban}
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      SQL_DEBUG: ${SQL_DEBUG:-false}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount configs directory for MCP server access
      - ./configs:/app/configs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "uv", "run", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat for scheduling
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run celery -A celery_app beat --loglevel=info
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nova}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nova_dev_password}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-nova_kanban}
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      SQL_DEBUG: ${SQL_DEBUG:-false}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      # Mount configs directory for settings access
      - ./configs:/app/configs
    restart: unless-stopped

  # Flower for Celery monitoring (optional)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uv run celery -A celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Google-workspace MCP Server
  google-workspace:
    build:
      context: ./mcp_servers/google-workspace
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
    volumes:
      - ./mcp_servers/google-workspace/token.json:/app/token.json
      - ./mcp_servers/google-workspace/credentials.json:/app/credentials.json:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Feature Request MCP Server
  feature-request:
    build:
      context: ./mcp_servers/feature_request
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  neo4j_data:
  redis_data:
  ollama_data:

networks:
  default:
    name: nova-network 